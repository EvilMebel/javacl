#summary Instructions to build JavaCL / ScalaCL / OpenCL4Java
#labels Featured
#sidebar TOCWiki

All NativeLibs4Java's sub-projects can be built from [http://code.google.com/p/nativelibs4java/source/browse/ sources] in one step.
This includes :
  * [http://code.google.com/p/javacl/ JavaCL, ScalaCL and OpenCL4Java]
  * [http://code.google.com/p/jnaerator/ JNAerator]
  * [http://code.google.com/p/bridj/ BridJ]
  * [http://code.google.com/p/nativelibs4java/wiki/Mono Mono4Java]

= Full build (first time) =

This will build all of NativeLibs4Java's projects, including JNAerator.
It will take some time, so you'll want to have a coffee during the build (if you've never used Maven before, this can take up to 15 minutes, so that might be enough for two coffees).

Subsequent builds will be much quicker (see next section), and can be launched from your Maven-aware IDE of choice.

  * First, [http://maven.apache.org/download.html install Maven].
  * Checkout [http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/libraries nativelibs4java files] :
    {{{
svn checkout http://nativelibs4java.googlecode.com/svn/trunk/libraries nativelibs4java
cd nativelibs4java
}}}
  * Run the following Maven commands :
    {{{
cd Parent
mvn install
cd ..
mvn install -Dmaven.test.skip=true
}}}

After the build is finished, you'll find JavaCL's full self-contained JAR in `OpenCL/JavaCL/target/javacl-xxx-shaded.jar`

= Incremental builds (after a first full build) =

Note that if you want JavaCL's tests to pass, you'll need to install JOGL 2.x on your system  first (see next section)

To build JavaCL Demos, just cd to the libraries/OpenCL/Demos directory and run the following command (works the same for any other sub-project) :
{{{
mvn clean install
}}}

To avoid launching tests, you can append a `-Dmaven.test.skip=true` argument to that command.

= Installing JOGL 2.x =

  * Download the NativeLibs4Java-assembled JOGL package for your architecture + operating system :
    * Windows [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-windows-i586-latest.zip 32 bits] | [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-windows-amd64-latest.zip 64 bits]
    * Linux [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-linux-i586-latest.zip 32 bits] | [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-linux-amd64-latest.zip 64 bits]
    * [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-macosx-universal-latest.zip MacOS X]
  * Extract the zip and put its content in your Java Runtime Environment "lib/ext" directory
    * On Linux, this could be `/usr/lib/jvm/java-6-sun-1.6.0.20/jre/lib/ext/` or `/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/ext/`
    * On Windows, this could be `C:\Program Files\Java\jre-1.6.0\lib\ext`
    * On MacOS X this is `~/Library/Java/Extensions` (the `~` is your user home directory ; you can create these directories if they don't exist, but make sure to do it in a Terminal, as there might be translations in the Finder, for instance `~/Library` being visible as `Biblioth√®que` in French)

= Regenerating low-level bindings =

This is *not advised*, *not supported* and *reserved to experienced users*.

You'll have to edit the autogenerated files after the generation to avoid regressions, use some SVN diff for that. 

The current SVN version of OpenCL4Java's wrappings was generated by bits on three platforms).

Run the following command in the OpenCL4Java directory, after a first full build :
    {{{
mvn com.jnaerator:maven-jnaerator-plugin:jnaerate
}}}