#summary Instructions to build JavaCL / ScalaCL / OpenCL4Java
#labels Featured

JavaCL, ScalaCL, OpenCL4Java and JNAerator can be built from sources.

= Full build (first time) =

This will build all of NativeLibs4Java's projects, including JNAerator.
It will take some time, so you'll want to have a coffee during the build (if you've never used Maven before, this can take up to 15 minutes, so that might be enough for two coffees).

Subsequent builds will be much quicker (see next section), and can be launched from your Maven-aware IDE of choice.

  * First, [http://maven.apache.org/download.html install Maven].
  * Checkout [http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/libraries nativelibs4java files] :
    {{{
svn checkout http://nativelibs4java.googlecode.com/svn/trunk/libraries nativelibs4java
cd nativelibs4java
}}}
  * Run the following Maven command :
    {{{
mvn install -Dmaven.test.skip=true
}}}

After the build is finished, you'll find JavaCL's full self-contained JAR in `OpenCL/JavaCL/target/javacl-xxx-shaded.jar`

= Incremental builds (after a first full build) =

Note that if you want JavaCL's tests to pass, you'll need to install JOGL 2.x on your system  first (see next section)

To build JavaCL Demos, just cd to the libraries/OpenCL/Demos directory and run the following command (works the same for any other sub-project) :
{{{
mvn clean install
}}}

To avoid launching tests, you can append a `-Dmaven.test.skip=true` argument to that command.

= Installing JOGL 2.x =

_This is tricky_ : you need to extract *some* of the files from the [http://download.java.net/media/jogl/builds/nightly/ archive that matches your platform] to the extension directory of your JRE (jre6/lib/ext), but not all of them (otherwise JOGL will present you black screens without explanation).

Typically, you'll need :
  * jogl.all.jar
  * jogl_gl2.dll / .so / .dylib
  * gluegen-rt.jar
  * gluegen-rt.dll / .so / .dylib
  * nativewindow.all.jar
  * nativewindow_awt.dll / .so / .dylib
  * nativewindow_jvm.dll / .so / .dylib

Yeah, that sucks (hope they'll make an up-to-date Maven repository available soon...).

= Regenerating low-level bindings =

This is *not advised*, *not supported* and *reserved to experienced users*.

You'll have to edit the autogenerated files after the generation to avoid regressions, use some SVN diff for that. 

The current SVN version of OpenCL4Java's wrappings was generated by bits on three platforms).

Run the following command in the OpenCL4Java directory, after a first full build :
    {{{
mvn com.jnaerator:maven-jnaerator-plugin:jnaerate
}}}