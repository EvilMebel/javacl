#summary How to use images with JavaCL

= Introduction =

OpenCL supports 2D and 3D images as first-class entities within computation kernels.

= Image Formats =

It's very easy to query an OpenCL implementation for supported image formats using `CLContext.getSupportedImageFormats` :
{{{
import com.nativelibs4java.opencl.*;

CLContext context = JavaCL.createBestContext();
CLImageFormat[] formats = context.getSupportedImageFormats(CLMem.Flags.ReadWrite, CLMem.ObjectType.Image2D);
for (CLImageFormat format : formats)
    System.out.println("Supported format : " + format);
}}}

The [http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clGetSupportedImageFormats.html OpenCL specification] guarantees that the following formats are available on all OpenCL implementations :
  * RGBA, UNormInt8
  * RGBA, UNormInt16
  * RGBA, SignedInt8
  * RGBA, SignedInt16
  * RGBA, SignedInt32
  * RGBA, UnsignedInt8
  * RGBA, UnsignedInt16
  * RGBA, UnsignedInt32
  * RGBA, HalfFloat
  * RGBA, Float
  * BGRA, UNormInt8

This means that an OpenCL implementation may not support any grayscale image type natively, for instance, but JavaCL still offers easy ways to handle BufferedImages of the TYPE_BYTE_GRAY and TYPE_USHORT_GRAY types (see below).

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages