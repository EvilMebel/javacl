#summary Description of JavaCL's bundled goodies

<wiki:toc max_depth="3" />

= Fourier Transforms (DFT, power-of-two FFT) =

JavaCL ships with ready-to-use FFT utility classes (Fourier transform and inverse transform) :
  * [http://nativelibs4java.sourceforge.net/javacl/api/stable/com/nativelibs4java/opencl/util/fft/FloatFFTPow2.html FloatFFTPow2]
  * [http://nativelibs4java.sourceforge.net/javacl/api/stable/com/nativelibs4java/opencl/util/fft/DoubleFFTPow2.html DoubleFFTPow2]

It is pretty similar to Apache Common's [http://commons.apache.org/math/api-2.1/org/apache/commons/math/transform/FastFourierTransformer.html FastFourierTransformer] class, except that :
  * It's *significantly faster* (even when run on a CPU OpenCL device)
  * It has floats and doubles variants (Apache's implementation only deals with doubles)
  * It uses primitive arrays instead of arrays of [http://commons.apache.org/math/api-2.1/org/apache/commons/math/complex/Complex.html Complex] for complex data (it interleaves real and imaginary values in an array that's twice as big)

JavaCL even features a *slower* general Fourier Transform that works with input sizes that aren't powers of two :
  * [http://nativelibs4java.sourceforge.net/javacl/api/stable/com/nativelibs4java/opencl/util/fft/FloatDFT.html FloatDFT]
  * [http://nativelibs4java.sourceforge.net/javacl/api/stable/com/nativelibs4java/opencl/util/fft/DoubleDFT.html DoubleDFT]

The following code computes an FFT and the reverse FFT in a few lines :
{{{
int n = 1024; // power-of-two
float[] complexInput = new float[2 * n]; // interleaved real and imag values
for (int i = 0; i < n; i++) {
    complexInput[i * 2] = i; // pure-real input
}
CLContext context = JavaCL.createBestContext(); // use createBestContext(DoubleSupport) for doubles
CLQueue queue = context.createDefaultQueue();

FloatFFTPow2 fft = new FloatFFTPow2(context); // use default OpenCL context
float[] transformed = fft.transform(queue, complexInput, false);
float[] transformedBack = fft.transform(queue, transformed, true);
}}}

These FFT classes can also operate directly on user-provided input and output [http://nativelibs4java.sourceforge.net/javacl/api/stable/com/nativelibs4java/opencl/CLBuffer.html CLBuffer] instances, to avoid back-and-forth conversions from Java primitive arrays to OpenCL memory (useful if you're trying to do the FFT of data that was just transformed by OpenCL).

= Parallel Random Numbers Generator =

JavaCL ships with a [http://en.wikipedia.org/wiki/Xorshift Xorshift] random numbers generator, adapted to work in parallel (using a warmup phase).

[http://nativelibs4java.sourceforge.net/javacl/api/stable/com/nativelibs4java/opencl/util/ParallelRandom.html ParallelRandom] was designed as a drop-in replacement for [http://download.oracle.com/javase/6/docs/api/java/util/Random.html java.util.Random] (albeit with a more limited API) :
{{{
ParallelRandom r = new ParallelRandom();
while (true) {
    System.out.println(r.nextDouble());
}
}}}