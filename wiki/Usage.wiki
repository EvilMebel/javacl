#summary How to use / install JavaCL
#labels Featured
#sidebar TOCWiki

<wiki:toc max_depth="3" />

= Prequisites =

== OpenCL implementation ==

There are now quite a few [http://www.khronos.org/opencl/ OpenCL] implementations out there (and they're all working fine with JavaCL) :
  * [http://www.apple.com/macosx/technology/#opencl MacOS X 10.6 Snow Leopard] comes with OpenCL pre-installed (won't work on earlier MacOS X versions)
  * [http://developer.amd.com/gpu/AMDAPPSDK/Pages/default.aspx AMD Accelerated Parallel Processing (APP) SDK (formerly ATI Stream)] for ATI cards and/or any [http://en.wikipedia.org/wiki/SSE2 SSE2]-enabled CPUs on all flavours of Linux and Windows (even works on [http://en.wikipedia.org/wiki/Intel_Atom Atom] CPUs !)
  _Note that ATI Stream's CPU implementation only supports images in version 2.4_ (before, it will just crash your app !)

  _Also note_ that you don't need to install Catalyst drivers or build anything from the APPSDK package : simply untar the package, set up your LD_LIBRARY_PATH and sudo-untar the ICD registration package.
  * [http://www.nvidia.com/object/cuda_opencl_new.html NVIDIA drivers] for NVIDIA cards
  * [http://software.intel.com/en-us/articles/intel-opencl-sdk/ Intel OpenCL SDK] for Intel CPUs on Windows and Linux

== Optional : OpenGL bindings ==

If you want to share data between OpenCL and OpenGL, you'll need an OpenGL library such as JOGL or [http://lwjgl.org/ LWJGL].

=== Lightweight Java Game Library (LWJGL) ===

The excellent [http://lwjgl.org/ Lightweight Java Game Library (LWJGL)] is a premier choice for OpenGL and OpenAL cross-platform programming in Java, providing a fast close-to-metal API.

It [http://www.lwjgl.org/wiki/index.php?title=Main_Page#Getting_started can be installed in many various ways, including Maven].

=== Jogamp JOGL ===

After a long radio silence, fresh forces are injected again into JOGL (now hosted at [http://jogamp.org/ jogamp.org]), with even alternative OpenCL bindings.

As the jogamp OpenGL bindings are still a bit uneasy to install, here's a simplified install procedure to get the latest version of JOGL : 
  * Download the `NativeLibs4Java-assembled` JOGL package for your architecture + operating system :
    * Windows [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-windows-i586-latest.zip 32 bits] | [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-windows-amd64-latest.zip 64 bits]
    * Linux [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-linux-i586-latest.zip 32 bits] | [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-linux-amd64-latest.zip 64 bits]
    * [http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-macosx-universal-latest.zip MacOS X]
  * Extract the zip and put its content in your Java Runtime Environment "lib/ext" directory
    * On Linux, this is a path like one of these :
{{{
/usr/lib/jvm/java-6-sun/jre/lib/ext/
/usr/lib/jvm/java-6-openjdk/jre/lib/ext/
}}}
      So you might install JOGL like this (download included, shown here for i586 architecture) :
{{{
cd /usr/lib/jvm/java-6-openjdk/jre/lib/ext/
sudo wget http://nativelibs4java.sourceforge.net/thirdparty/jogl/jogl-linux-i586-latest.zip
sudo unzip jogl-linux*.zip
sudo rm jogl-linux*.zip
}}}
    * On Windows, this looks like :
{{{
C:\Program Files\Java\jre-1.6.0\lib\ext
}}}
    * On MacOS X this is :
{{{
~/Library/Java/Extensions
}}}
    (the `~` is your user home directory ; you can create these directories if they don't exist, but make sure to do it in a Terminal, as there might be translations in the Finder, for instance `~/Library` being visible as `Biblioth√®que` in French)

= Use JavaCL in a project =

== With Maven ==

JavaCL and its plugin can be used with [http://maven.apache.org/ Maven], simply edit your `pom.xml` as follows :
{{{
<project>
  <dependencies>

    <dependency>
      <groupId>com.nativelibs4java</groupId>
      <artifactId>javacl</artifactId>
      <version>1.0.0-RC3</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>com.nativelibs4java</groupId>
        <artifactId>maven-javacl-plugin</artifactId>
        <version>1.0.0-RC3</version>
        <executions>
        <execution>
          <phase>generate-sources</phase>
          <goals>
            <goal>compile</goal>
          </goals>
        </execution>
        </executions>
      </plugin>
	  
    </plugins>
  </build>
</project>
}}}

If you wish to use a previous release (1.0.0-RC1, for instance) or a snapshot (1.0-SNAPSHOT), you'll need the following repositories :
{{{
<project>
  <repositories>
    <repository>
      <id>sonatype</id>
      <name>Sonatype OSS Snapshots Repository</name>
      <url>http://oss.sonatype.org/content/groups/public</url>
    </repository>
    <repository>
      <id>nativelibs4java</id>
      <name>nativelibs4java Maven2 Repository</name>
      <url>http://nativelibs4java.sourceforge.net/maven</url>
    </repository>
  </repositories>
  <pluginRepositories>
      <pluginRepository>
          <id>sonatype</id>
          <name>Sonatype OSS Snapshots Repository</name>
          <url>http://oss.sonatype.org/content/groups/public</url>
      </pluginRepository>
  </pluginRepositories>

</project>
}}}

Please read [JavaCLGenerator this wiki page] for more information about JavaCL Generator.

== With sbt (simple-build-tool) ==

Add these two lines to your project file :
{{{
import sbt._
class MyProject(info: ProjectInfo) extends DefaultProject(info)
{
  // Repository for snapshots :
  // val sonatypeOSSRepo = "Sonatype OSS Repository" at "http://oss.sonatype.org/content/groups/public"
  val javacl = "com.nativelibs4java" % "javacl" % "1.0.0-RC3"
}
}}}

== With OSGi ==

JavaCL is compatible with OSGi _a minima_, which means it should now load fine in any OSGi container but you might find some OSGi features missing : [https://github.com/ochafik/nativelibs4java/issues/new please report any issue] you find.

== Raw download ==

If you're not using Maven, Gradle, sbt or any other build manager, you can proceed to the [http://code.google.com/p/javacl/downloads/list downloads section] and add `javacl-x.x.x-shaded.jar` to your classpath manually :

Compile some code :
{{{
javac -cp javacl-x.x.x-shaded.jar MyTest.java
}}}

Run the code (replace the semi-colon ';' by ':' on Unix systems) :
{{{
java -cp javacl-x.x.x-shaded.jar;. MyTest
}}}

= Install / Build from sources =

Please read the [Build] page.