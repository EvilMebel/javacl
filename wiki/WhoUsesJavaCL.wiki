#summary List of projects known to use JavaCL
#labels Featured

<wiki:toc max_depth="3" />

== `OpenWorm` ==

[http://www.openworm.org/ OpenWorm] is an ambitious life-simulation project that tackles "the greatest puzzle of our time - what are all the events that happen inside a living brain?" (to achieve that long-term goal, it starts with a not-so-simple worm simulation that deals with neural networks, chemistry and physics simulation...)

It [http://www.openworm.org/index.html#/tech uses JavaCL] to perform GPU-powered simulations.

== `Encog` ==

"[http://www.heatonresearch.com/encog Encog] is an advanced neural network and machine learning framework."

There appears to be [http://www.heatonresearch.com/wiki/JavaCL experimentations with JavaCL] (and other bindings) to perform GPGPU.

== `STEM` ==

The [http://www.eclipse.org/stem/ Spatiotemporal Epidemiological Modeler (STEM)] tool is designed to help scientists and public health officials create and use spatial and temporal models of emerging infectious diseases. These models can aid in understanding and potentially preventing the spread of such diseases.

== `CellProfiler`

[http://cellprofiler.org/ CellProfiler] is free open-source software designed to enable biologists without training in computer vision or programming to quantitatively measure phenotypes from thousands of images automatically.

Its OpenCL backend uses JavaCL.

== `Jama` ==

[http://math.nist.gov/javanumerics/jama/ Jama] is a public-domain Java Matrix Library.
[http://muuki88.github.com/jama-osgi/project-summary.html mukis.de] maintains a port that uses JavaCL for GPU-accelerated operations, available in Maven Central.

== `Calx (Clojure)` ==

[https://github.com/ztellman/calx Calx] is an idiomatic Clojure wrapper for OpenCL.

It uses JavaCL underneath.

== `JavaCL Parallel Primitives` ==

The [http://gitorious.org/javaclpp/pages/Home JavaCL Parallel Primitives] (from [http://kazocsaba.blogspot.com/ Kazó Csaba], who also [http://code.google.com/p/bridj/wiki/CreditsAndLicense contributes to JavaCL]) provides reduction and scan utilities that go beyond [Goodies those provided in JavaCL], and more...

== `ScalaCL` ==

[http://code.google.com/p/scalacl/ ScalaCL] (BSD-licensed) is an optimizing Scala compiler plugin + GPU-backed collections.

It uses JavaCL, which is still accessible directly if needed.

== Academia ==

=== Papers and Theses ===

  * [http://www.cs.ucl.ac.uk/staff/s.yoo/ Shin Yoo] used JavaCL in his paper [http://www.ssbse.org/2011/presentations/Session%207/ssbse11_shin_yoo.pdf Highly Scalable Multi Objective Test Suite Minimisation Using Graphics Cards] (won the [http://www.ssbse.org/2011/prizes.html best paper award at SSBSE 2011]).
  * [http://www.csc.kth.se/utbildning/kandidatexjobb/datateknik/2011/rapport/karlsson_john_OCH_lofquist_lars_K11057.pdf The use of GPU with OpenCL for simulation of a flocking model] (in Swedish, with an English abstract) by John Karlsson, Lars Löfquist
  * [http://digitalcommons.trinity.edu/cgi/viewcontent.cgi?article=1027&context=compsci_honors The Design and Implementation of a Bytecode for Optimization on Heterogeneous Systems], by Kerry A. Seitz

=== Labs ===

  * The [http://www.cs.waikato.ac.nz/research/jstar/ JStar Research Group] from [http://www.waikato.ac.nz/ The University of Waikato]
  * The [http://wiki.cs.vu.nl/mp/index.php/OpenCL_Java_high-level_API Faculty of Sciences / Department of Computer Sciences] from [http://www.cs.vu.nl/en/index.asp The University of Amsterdam]